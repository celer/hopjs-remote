#!/usr/bin/env node

var Hop = require("../index");
var path=require('path');
var request=require('request');
var url=require('url');
var fs=require('fs');
var Workflow=require('hopjs-workflow');

var optimist = require('optimist');

optimist=optimist.describe("url","The url of the remote hopjs API to use");
optimist=optimist.describe("list","List the available methods");
optimist=optimist.describe("help","Describe a specific method");
optimist=optimist.describe("eval","Eval the specified file with the api included in the global context");
optimist=optimist.describe("unitTest","Run the unit tests on the specified url");
optimist=optimist.describe("testDetails","Show the details for each test");
optimist=optimist.describe("perfLog","Where performance stats will be logged to, #now and #url can be subst in the filename");
optimist=optimist.describe("compare","Compare some number of performance logs");
optimist=optimist.describe("noColors","Don't use colors when displaying results");

var args = optimist.argv;

if(args.noColors){
} else {
  Workflow.useColors=true;
}

if(args.url){
	var apiOptions={};
	if(args.unitTest){
		apiOptions.ignoreDemands=true;
	}
    
  if(args["_"].length>0){

      var method = args["_"][0];
      Hop.do(args.url,method,args,function(err,res){
        if(err){
          console.error(err);
          process.exit(1);
        } 
        console.log(res);
      });
   
  } else if(args.list){
    
    Hop.listMethods(args.url,function(err,methods){
        if(err){
          console.error(err);
          process.exit(1);
        } 
        console.log(methods.join("\n"));
    });
  
  } else if(args.unitTest){
  
    Hop.runTests(args.url,args,function(err,res){
      
      if(err)
        console.error(err);
        process.exit(3);

      console.log(res);
      if(res.fail>0){
        process.exit(2);
      }      

      if(res.fail==0){
        process.exit(0);
      }
    }); 

  }  

}
