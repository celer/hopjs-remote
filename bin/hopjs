#!/usr/bin/env node

var Hop = require("../lib/remote");
var colors=require("colors");
var path=require('path');
var request=require('request');
var url=require('url');
var fs=require('fs');


var optimist = require('optimist');

optimist=optimist.describe("url","The url of the remote hopjs API to use");
optimist=optimist.describe("list","List the available methods");
optimist=optimist.describe("help","Describe a specific method");
optimist=optimist.describe("eval","Eval the specified file with the api included in the global context");
optimist=optimist.describe("unitTest","Run the unit tests on the specified url");
optimist=optimist.describe("testDetails","Show the details for each test");
optimist=optimist.describe("perfLog","Where performance stats will be logged to, #now and #url can be subst in the filename");
optimist=optimist.describe("compare","Compare some number of performance logs");

var args = optimist.argv;

if(args.url){
	var apiOptions={};
	if(args.unitTest){
		apiOptions.ignoreDemands=true;
	}

  Hop.remoteAPI(args.url,function(err,api){
    if(err){
      console.error("Unable to load api:",err);
      process.exit(-2);
    }
    if(args["_"].length>0){

      var call = args["_"][0];
      
      var m = /(.*)\.([A-Za-z0-9]+)/.exec(call);
      if(m.length==3){
        var object=m[1];
        var method=m[2];
        
        if(!api[object]) {
          console.error("invalid object specified: "+object);
          process.exit(-2);
        } 
        if(!api[object][method]) {
          console.error("invalid method specified: "+method);
          process.exit(-3);
        } 
        try { 
                api[object][method](args,function(err,res){
                  if(err){
                    console.error(err); 
                    process.exit(-128);
                  } else { 
                    console.log(res);
                    process.exit(0);
                  }
                }); 
        } catch(e){
          console.error(e);
          process.exit(-4);
        }
      } else {
        console.error("Invalid method name:"+call);
      }
  
    } else {
      if(args.list){
        for(var objName in api._json.Objects){
          for(var methodName in api._json.Objects[objName].methods){
            console.log(objName+"."+methodName); 
          }
        }
        process.exit(-1);
      } else if(args.unitTest){
        Hop.remoteAPITestHarness(args.url,function(err,testHarness){
          try {
						if(err)
							throw err;

            eval(testHarness);

            var totalDuration=0;
				
            captureStat=function(url,method,duration,hadError){
              totalDuration+=duration;
              if(args.perfLog){
                var perfLog = args.perfLog.replace("#now",Date.now()).replace("#url",url);
                try {
                  fs.appendFileSync(perfLog,url+", "+method+", "+duration+", "+hadError+"\n");
                } catch(e){
                  console.log(e);
                } 
              }    
            } 


            Hop.load=function(urlOrService,onComplete){

              if(urlOrService.indexOf("http")==-1){
                urlOrService = url.resolve(args.url,urlOrService);
              }


              request.get(urlOrService,function(err,ahr,data){

                if(err) return onComplete(err);
                if(!data) return onComplete("Error loading service:"+urlOrService); 
              
       
                eval(data);
 
                onComplete(null,data);    

              }); 
            }
            Hop.TestCase.prototype.do=function(methodName,input,onComplete){
              var m = /(.*)\.([A-Za-z0-9]+)/.exec(methodName);
              var object=m[1];
              var method=m[2];
              var startTime = Date.now();
							try {     
                if(api[object] && api[object][method]){
                  api[object][method](input,function testOnComplete(err,res){
                    var endTime = Date.now();
                    captureStat(args.url,object+"."+method,endTime-startTime,!err);
                    onComplete(err,res);
                  });
                } else if(eval(methodName)){
                  eval(methodName)(input,function testOnComplete(err,res){
                    var endTime = Date.now();
                    captureStat(args.url,object+"."+method,endTime-startTime,!err);
                    onComplete(err,res);
                  })
                } else {
                  throw new Error("No such method:"+methodName);
                }
  						} catch(e){
								console.error("Error executing `"+methodName+":"+e.toString());
								console.error(e.stack);
								return onComplete(e.toString());
							}
	
            }
            Hop.TestCase.lastTaskIndex=-1;
            Hop.TestCase.results={ pass:0, fail:0};
            Hop.TestCase.prototype.testResult=function(taskIndex,method,input,err,response,testType,result){
              if(Hop.TestCase.lastTaskIndex!=taskIndex){
                console.log("\t#"+(taskIndex+1),method);
                Hop.TestCase.lastTaskIndex=taskIndex;
              
                if(args.testDetails){
									if(input && input instanceof Buffer){
										input={ type:"Buffer", length: input.length, sample: output.toString().substr(0,10) };
									}
									if(response && response instanceof Buffer){
										response={ type:"Buffer", length: response.length, sample: response.toString().substr(0,10) };
									}
									if(typeof input=="string" && input.length>100) input=input.substr(0,100)+"...";
									if(typeof response=="string" && response.length>100) response=response.substr(0,100)+"...";
                  console.log("\t\tInput",JSON.stringify(input));
                  console.log("\t\tError",err);
                  console.log("\t\tResult",JSON.stringify(response));
                  console.log();
                } 
              }
							var res = Hop.Tests[testType][result?"pass":"fail"];
						
              console.log("\t\t",(result?"P".green:"F".red),(result?res.green:res.red));

              Hop.TestCase.results[(result?"pass":"fail")]++;
            }
            if(typeof args.unitTest=="string"){
              Hop.TestCase.run(args.unitTest); 
            } else {
              var toRun=Object.keys(Hop.TestCases);
              var run=function(){
                if (toRun.length>0){
                  var testCase = toRun.shift();
									console.log(("\nRunning :"+testCase+"\n").bold);
                  Hop.TestCase.run(testCase,function(){ 
                      Hop.TestCase.lastTaskIndex=-1;
                      run();
                  });
                } else {  
                  console.log();
                  console.log("---------------------------------------------------------------");
                  
                  console.log("Pass",Hop.TestCase.results.pass,"Fail",Hop.TestCase.results.fail, (Hop.TestCase.results.pass/(Hop.TestCase.results.pass+Hop.TestCase.results.fail)*100).toFixed(2)+"%");
                  console.log("Total duration ",(totalDuration/1000).toFixed(2)+"s");

                  process.exit((Hop.TestCase.results.fail==0?0:128));
                }
              }
              run();
            }
          } catch(e){
            console.error("Error loading test harness:",e);
						console.error(e.stack);
            process.exit(-9);
          }
        });     
      } else if(args.help){
        var m = /(.*)\.([A-Za-z0-9]+)/.exec(args.help);
        if(m.length==3){
          var object=m[1];
          var method=m[2];
          
          if(!api[object]) {
            console.error("invalid object specified: "+object);
            process.exit(-2);
          } 
          if(!api[object][method]) {
            console.error("invalid method specified: "+method);
            process.exit(-3);
          } 
      
          var method = api._json.Objects[object].methods[method];            
 
          console.log(call + (method.desc?" - "+method.desc:""));
          console.log(method.method.toUpperCase()+" "+path.join(api._json.basePath,method.path));
          console.log("------------------------");
          for(var param in method.params){
            console.log("\t",param+(method.params[param].demand?"*":""),"\t",method.params[param].desc);
          } 
          console.log("\n");
          console.log("* required");
          process.exit(0);
        } else {
          console.error("Invalid method call",args.help);
          process.exit(-1);
        }
      } else if(args.eval){
        fs.readFile(args.eval,function(err,data){
          if(err) { 
            console.error("Unable to open file:"+err);
            process.exit(-8);
          } else {
            data = data.toString();
            api.args=args;
            with(api){ 
              eval(data);
            }
          }
        });
      } else {
        optimist.showHelp();
        console.log("Please specify a method to call or --list, --unitTest, --help, --eval, --compare");
        process.exit(-1);
      }
    }
  },apiOptions);

} else if(args.compare){
  //This will compare some number of performance log files
  var logs = args._.slice(0);
  logs.unshift(args.compare);
  console.log(logs);
  var data = {};
  logs.map(function(log){
    data[log]=fs.readFileSync(log).toString().split("\n").map(function(line){
      var d = line.split(/,\s*/);
      return { url: d[0], method:d[1], duration:d[2], hadError:d[3] };
    });
  }); 

  //Gather up all the stats 
  var methodStats = {};
  for(var log in data){
    var d = data[log];
    for(var i in d){
      if(d[i].method){
        var method = d[i].method;
        if(!methodStats[method])
          methodStats[method]={};
        if(!methodStats[method][log])
          methodStats[method][log]={ count:0, duration:0};
        methodStats[method][log].count++;
        methodStats[method][log].duration+=d[i].duration*1;
      }
    }  
  }

  var str="Method                   ";
  for(var log in data){
    str+=("\t"+log)
  }
  str+=("\t stdDev");
  console.log(str);
  console.log();
  for(var method in methodStats){
    var str=method;
    while(str.length<25){
      str+=" ";
    }
    var v = [];
    var mean = 0;
    var l = 0;
    for(var log in data){
      var count = methodStats[method][log].count;
      var duration = methodStats[method][log].duration;
      var avg = (duration/count);
      mean+=avg;
      l++;
      v.push(avg);
      var unit = "ms";
      if(avg>1000) { avg=avg/1000; unit="s"; }
      str+="\t"+(avg).toFixed(1)+" "+unit+"("+count+")";
    }
    var stdDev=0;
    v.map(function(v){
      var s = (mean/l)-v;
      stdDev+=s*s;
    });

    str+="\t"+Math.sqrt(stdDev/l).toFixed(2);
    console.log(str);
  }  

}
